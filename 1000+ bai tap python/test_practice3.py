import practice3

p = practice3.Practice3()

def test_count_characters():
    assert (p.count_characters(['###', '###', '###']) == 9)
    assert (p.count_characters(['22222222', '22222222',]) == 16)
    assert (p.count_characters(['------------------']) == 18)
    assert (p.count_characters([]), 0)
    assert (p.count_characters(['', '']) == 0)

def test_move_to_end():
    assert (p.move_to_end([1, 3, 2, 4, 4, 1], 1) == [3, 2, 4, 4, 1, 1])
    assert (p.move_to_end([7, 8, 9, 1, 2, 3, 4], 9) == [7, 8, 1, 2, 3, 4, 9])
    assert (p.move_to_end([7, 7, 7, 6, 6, 6, 6], 7) == [6, 6, 6, 6, 7, 7, 7])
    assert (p.move_to_end(["a", "c", "c", "c", "b", "c"], "b") == ["a", "c", "c", "c", "c", "b"])
    assert (p.move_to_end(["a", "c", "c", "c", "b", "c"], "c") == ["a", "b", "c", "c", "c", "c"])
    assert (p.move_to_end(["a", "a", "a", "b"], "a") == ["b", "a", "a", "a"])

def test_double_char():
    assert (p.double_char("String") == "SSttrriinngg")
    assert (p.double_char("Hello World!") == "HHeelllloo  WWoorrlldd!!")
    assert (p.double_char("1234!_ ") == "11223344!!__  ")
    assert (p.double_char("##^&%%*&%%$#@@!") == "####^^&&%%%%**&&%%%%$$##@@@@!!")
    assert (p.double_char("scandal") == "ssccaannddaall")
    assert (p.double_char("economics") == "eeccoonnoommiiccss")
    assert (p.double_char(" ") == "  ")
    assert (p.double_char("_______") == "______________")
    assert (p.double_char("equip gallon read") == "eeqquuiipp  ggaalllloonn  rreeaadd")
    assert (p.double_char("baby increase") == "mbbaabbyy  iinnccrreeaassee")

def test_reverse():
    assert (p.reverse(False) == True)
    assert (p.reverse(True) == False)
    assert (p.reverse(0) == True)
    assert (p.reverse(None) == True)
    assert (p.reverse("") == True)
    assert (p.reverse({}) == True)

def test_num_layers():
    assert (p.num_layers(0) == "0.0005m")
    assert (p.num_layers(1) == "0.001m")
    assert (p.num_layers(2) == "0.002m")
    assert (p.num_layers(3) == "0.004m")
    assert (p.num_layers(4) == "0.008m")
    assert (p.num_layers(5) == "0.016m")
    assert (p.num_layers(6) == "0.032m")
    assert (p.num_layers(7) == "0.064m")
    assert (p.num_layers(8) == "0.128m")
    assert (p.num_layers(9) == "0.256m")
    assert (p.num_layers(10) == "0.512m")
    assert (p.num_layers(11) == "1.024m")
    assert (p.num_layers(12) == "2.048m")
    assert (p.num_layers(13) == "4.096m")
    assert (p.num_layers(14) == "8.192m")
    assert (p.num_layers(15) == "16.384m")
    assert (p.num_layers(16) == "32.768m")
    assert (p.num_layers(17) == "65.536m")
    assert (p.num_layers(18) == "131.072m")
    assert (p.num_layers(19) == "262.144m")
    assert (p.num_layers(20) == "524.288m")
    assert (p.num_layers(21) == "1048.576m")
    assert (p.num_layers(22) == "2097.152m")
    assert (p.num_layers(23) == "4194.304m")
    assert (p.num_layers(24) == "8388.608m")
    assert (p.num_layers(25) == "16777.216m")
    assert (p.num_layers(26) == "33554.432m")
    assert (p.num_layers(27) == "67108.864m")
    assert (p.num_layers(28) == "134217.728m")
    assert (p.num_layers(29) == "268435.456m")
    assert (p.num_layers(30) == "536870.912m")
    assert (p.num_layers(31) == "1073741.824m")
    assert (p.num_layers(32) == "2147483.648m")
    assert (p.num_layers(33) == "4294967.296m")
    assert (p.num_layers(34) == "8589934.592m")
    assert (p.num_layers(35) == "17179869.184m")
    assert (p.num_layers(36) == "34359738.368m")
    assert (p.num_layers(37) == "68719476.736m")
    assert (p.num_layers(38) == "137438953.472m")
    assert (p.num_layers(39) == "274877906.944m")
    assert (p.num_layers(40) == "549755813.888m")
    assert (p.num_layers(41) == "1099511627.776m")
    assert (p.num_layers(42) == "2199023255.552m")
    assert (p.num_layers(43) == "4398046511.104m")
    assert (p.num_layers(44) == "8796093022.208m")
    assert (p.num_layers(45) == "17592186044.416m")
    assert (p.num_layers(46) == "35184372088.832m")
    assert (p.num_layers(47) == "70368744177.664m")
    assert (p.num_layers(48) == "140737488355.328m")
    assert (p.num_layers(49) == "281474976710.656m")
    assert (p.num_layers(50) == "562949953421.312m")
    assert (p.num_layers(51) == "1125899906842.624m")
    assert (p.num_layers(52) == "2251799813685.248m")
    assert (p.num_layers(53) == "4503599627370.496m")
    assert (p.num_layers(54) == "9007199254740.992m")
    assert (p.num_layers(55) == "18014398509481.984m")
    assert (p.num_layers(56) == "36028797018963.97m")
    assert (p.num_layers(57) == "72057594037927.94m")
    assert (p.num_layers(58) == "144115188075855.88m")
    assert (p.num_layers(59) == "288230376151711.75m")
    assert (p.num_layers(60) == "576460752303423.5m")
    assert (p.num_layers(61) == "1152921504606847.0m")
    assert (p.num_layers(62) == "2305843009213694.0m")
    assert (p.num_layers(63) == "4611686018427388.0m")
    assert (p.num_layers(64) == "9223372036854776.0m")

def test_index_of_caps():
    assert (p.index_of_caps("eDaBiT") == [1, 3, 5])
    assert (p.index_of_caps("eQuINoX") == [1, 3, 4, 6])
    assert (p.index_of_caps("determine") == [])
    assert (p.index_of_caps("STRIKE") == [0, 1, 2, 3, 4, 5])
    assert (p.index_of_caps("sUn") == [1])
    assert (p.index_of_caps("SpiDer") == [0, 3])
    assert (p.index_of_caps("accOmpAnY") == [3, 6, 8])
    assert (p.index_of_caps("@xCE#8S#i*$en") == [2, 3, 6])
    assert (p.index_of_caps("1854036297") == [])
    assert (p.index_of_caps("Fo?.arg~{86tUx=|OqZ!") == [0, 12, 16, 18])

def test_filter_list():
    assert p.filter_list([1, 2, 3, "a", "b", 4]) == [1, 2, 3, 4]
    assert p.filter_list(["A", 0, "Edabit", 1729, "Python", "1729"]) == [0, 1729]
    assert p.filter_list(["Nothing", "here"]) == []

def test_add_indexes():
    assert (p.add_indexes([0, 0, 0, 0, 0]) == [0, 1, 2, 3, 4])
    assert (p.add_indexes([1, 2, 3, 4, 5]) == [1, 3, 5, 7, 9])
    assert (p.add_indexes([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5])
    assert (p.add_indexes([-25, -15, 3]) == [-25, -14, 5])
    assert (p.add_indexes([27]) == [27])
    assert (p.add_indexes([-48, -20, 41, 29, -25, -17, -13, 5, 4, -5, 3, -17, 23]) == [-48, -19, 43, 32, -21, -12, -7, 12, 12, 4, 13, -6, 35])
    assert (p.add_indexes([-32, -24, -50, 48, 5, -27, -33, -3, 16, -16, -31, -11, 43]) == [-32, -23, -48, 51, 9, -22, -27, 4, 24, -7, -21, 0, 55])
    assert (p.add_indexes([38, -8, 40, -50, -26, -3, -29, -33, 13, 28]) == [38, -7, 42, -47, -22, 2, -23, -26, 21, 37])
    assert (p.add_indexes([-1, -3, -20, 13, 19, -12, 15, 8, -49, 27, -21, 17, 41, 17, 5, -45, -33]) == [-1, -2, -18, 16, 23, -7, 21, 15, -41, 36, -11, 28, 53, 30, 19, -30, -17])
    assert (p.add_indexes([35, -48, -17, 25, 25, -45, -49, -32, -40, 48, 20, -27, -22, -1, -20, -5, 29, 18, -28, -36]) == [35, -47, -15, 28, 29, -40, -43, -25, -32, 57, 30, -16, -10, 12, -6, 10, 45, 35, -10, -17])
    assert (p.add_indexes([-48]) == [-48])
    assert (p.add_indexes([-15, -20, -28, -41, -2, -36, -18, -23, 44, -17, -12, -33, 7, 34, 5, -16]) == [-15, -19, -26, -38, 2, -31, -12, -16, 52, -8, -2, -22, 19, 47, 19, -1])
    assert (p.add_indexes([-20, 25, 49, -4, -20, -26, 23, 23, -50, 44, -48, -27]) == [-20, 26, 51, -1, -16, -21, 29, 30, -42, 53, -38, -16])
    assert (p.add_indexes([-9, 46, -17, 26, 0, -26, 12, -15, -30, -44, 29, 45, -38, -43]) == [-9, 47, -15, 29, 4, -21, 18, -8, -22, -35, 39, 56, -26, -30])
    assert (p.add_indexes([-44, -42, 26, -50, -29, -32, -22, 27, -31, 21, -12, -18, -13, -24, 24, 35]) == [-44, -41, 28, -47, -25, -27, -16, 34, -23, 30, -2, -7, -1, -11, 38, 50])
    assert (p.add_indexes([49, -28, -30, 35]) == [49, -27, -28, 38])
    assert (p.add_indexes([20, -5, 25, -36, -12, 13, -30, 26, 34]) == [20, -4, 27, -33, -8, 18, -24, 33, 42])
    assert (p.add_indexes([-41, -22, -41, -12]) == [-41, -21, -39, -9])
    assert (p.add_indexes([-23, 26, 22]) == [-23, 27, 24])
    assert (p.add_indexes([-5, 25, 19, 31, -39, 26, 4, 10, -43, -4, 26, -34, -1, -13, -26, -45]) == [-5, 26, 21, 34, -35, 31, 10, 17, -35, 5, 36, -23, 11, 0, -12, -30])
    assert (p.add_indexes([48, -6, 13, 39]) == [48, -5, 15, 42])
    assert (p.add_indexes([18, 27, -27, -35, -19, -5, -37, 20]) == [18, 28, -25, -32, -15, 0, -31, 27])
    assert (p.add_indexes([-26, 37, -29, -35, 18, 20, -25]) == [-26, 38, -27, -32, 22, 25, -19])
    assert (p.add_indexes([-49, 33, -7, -25]) == [-49, 34, -5, -22])
    assert (p.add_indexes([8, -21, -1, -46, 2, 48, -14, 45, 7, 12, 9, 45, -12, -8]) == [8, -20, 1, -43, 6, 53, -8, 52, 15, 21, 19, 56, 0, 5])
    assert (p.add_indexes([1, -12, 17, 12]) == [1, -11, 19, 15])
    assert (p.add_indexes([49, 9, 11, -18, -15, -23, 32, 44, 33]) == [49, 10, 13, -15, -11, -18, 38, 51, 41])
    assert (p.add_indexes([22, -50, 36, 12, 2, -48, 2, -21, -49, -47]) == [22, -49, 38, 15, 6, -43, 8, -14, -41, -38])
    assert (p.add_indexes([-44, 6, 16, -35, -30]) == [-44, 7, 18, -32, -26])
    assert (p.add_indexes([40, -38, -17, 24, -41, 43, -34, 11, -38, -42, -1, 16, 20]) == [40, -37, -15, 27, -37, 48, -28, 18, -30, -33, 9, 27, 32])
    assert (p.add_indexes([-31, -5, -5]) == [-31, -4, -3])
    assert (p.add_indexes([-44, 11, 26, 40, 3, 50, 3, 42, -1, 40, -12, 48, 0, 18, 1, -28, -18, 47, 45, 2]) == [-44, 12, 28, 43, 7, 55, 9, 49, 7, 49, -2, 59, 12, 31, 15, -13, -2, 64, 63, 21])
    assert (p.add_indexes([21, -10, -49]) == [21, -9, -47])
    assert (p.add_indexes([-45, 49, 6, -50, 12, -30, 36, -36, -3, -28, 7, -47, -24, 34, 39, 45, 25]) == [-45, 50, 8, -47, 16, -25, 42, -29, 5, -19, 17, -36, -12, 47, 53, 60, 41])
    assert (p.add_indexes([-4, 45]) == [-4, 46])
    assert (p.add_indexes([42, -48, 40, -40, -17, -35, -16, 46]) == [42, -47, 42, -37, -13, -30, -10, 53])
    assert (p.add_indexes([-28]) == [-28])
    assert (p.add_indexes([-6, 12, -39, 40, 23, 33, -44]) == [-6, 13, -37, 43, 27, 38, -38])
    assert (p.add_indexes([-14, 10, 21, 40, 35, -36]) == [-14, 11, 23, 43, 39, -31])
    assert (p.add_indexes([-33, -35, 34, -39, -18, 17, -44, -23, -30, 43]) == [-33, -34, 36, -36, -14, 22, -38, -16, -22, 52])
    assert (p.add_indexes([-45, -22, 18, 26, -37, -26, 26, 37, -7, -31]) == [-45, -21, 20, 29, -33, -21, 32, 44, 1, -22])
    assert (p.add_indexes([-32, 41, -14, -43, 30, -24, -30, -18, 21, 30, 39, -45, -11, 9, 5, -12, -3]) == [-32, 42, -12, -40, 34, -19, -24, -11, 29, 39, 49, -34, 1, 22, 19, 3, 13])
    assert (p.add_indexes([-9, 21, 17, 48, -36, -16, 24, -15, -41, 47, -28, 2, 28, -12, 40, 27]) == [-9, 22, 19, 51, -32, -11, 30, -8, -33, 56, -18, 13, 40, 1, 54, 42])
    assert (p.add_indexes([4, 1, 16, -45, 47, -38, -18]) == [4, 2, 18, -42, 51, -33, -12])
    assert (p.add_indexes([12, 36, -42, 38]) == [12, 37, -40, 41])
    assert (p.add_indexes([-19, 12, 19, 39]) == [-19, 13, 21, 42])
    assert (p.add_indexes([5, -4, 26, 1, -43, 17, 14, -44, -40, 22, -22, -32, -13, -21, 50, 4, 12]) == [5, -3, 28, 4, -39, 22, 20, -37, -32, 31, -12, -21, -1, -8, 64, 19, 28])
    assert (p.add_indexes([-13, -33]) == [-13, -32])
    assert (p.add_indexes([-27, 46, 24, 36, 13, -18, 12]) == [-27, 47, 26, 39, 17, -13, 18])
    assert (p.add_indexes([-42, 18]) == [-42, 19])
    assert (p.add_indexes([-5, -10, -6, -34, 32, 15, 9, 32, 20, 36, -16, 5, -42, 14, -35, 22, -18, -29, -17, 29]) == [-5, -9, -4, -31, 36, 20, 15, 39, 28, 45, -6, 16, -30, 27, -21, 37, -2, -12, 1, 48])
    assert (p.add_indexes([42, -33, 29, -14, 45, -43, 4, 2, 8, -45, 46, 38, 16]) == [42, -32, 31, -11, 49, -38, 10, 9, 16, -36, 56, 49, 28])
    assert (p.add_indexes([-14, 28]) == [-14, 29])

def test_probability():
    assert (p.probability([14, 19, 2, 6], 12) == 50.0)
    assert (p.probability([11, 10, 9, 18, 16, 18, 4, 3, 5], 13) == 33.3)
    assert (p.probability([2, 13, 1, 11, 6, 9, 11, 14, 3], 15) == 0.0)
    assert (p.probability([11, 6, 17, 2, 1, 16, 20, 15], 7) == 62.5)
    assert (p.probability([12, 15, 12, 8, 20, 16, 1], 1) == 100.0)
    assert (p.probability([15, 8, 12, 1, 11, 4], 4) == 83.3)
    assert (p.probability([14, 11, 16, 3, 13, 14, 3], 8) == 71.4)
    assert (p.probability([1, 4, 18, 19, 15, 3, 3, 11], 23) == 0.0)
    assert (p.probability([9, 8, 17, 13, 17], 8) == 100.0)
    assert (p.probability([4, 6, 2, 9, 15, 18, 8, 2, 10, 8], 6) == 70.0)
    assert (p.probability([15, 4, 6, 11, 11, 17, 9, 16, 7, 4, 5, 10], 12) == 25.0)
    assert (p.probability([7, 1, 5, 7, 15, 15, 16, 14], 2) == 87.5)
    assert (p.probability([11, 4, 6, 7, 14, 4, 4], 8) == 28.6)
    assert (p.probability([10, 10, 3, 18, 14, 1, 2, 19, 17, 2, 4, 11, 18, 6, 3], 11) == 40.0)

def test_triangle():
    assert (p.triangle(1) == 1)
    assert (p.triangle(2) == 3)
    assert (p.triangle(3) == 6)
    assert (p.triangle(8) == 36)
    assert (p.triangle(2153) == 2318781)